####### LTMUX DEFAULT CONFIG #################################################
#
# This is  ltmux  default  config file! Edit it to 
# your needs but do not edit first commented line!
#
# In this file tmux  windows will also be referred
# to as "tab".
#
# NOTE:
#   To prevent  accidental  deletion of config file
#   (for example if you have heavily customized it)
#   change  above  text "LTMUX DEFAULT CONFIG" into
#
#       LTMUX KEEP CONFIG
#
#   If  changed,  config file will never be deleted 
#   nor modified by ltmux.
#

##############################################################################
#
#  SOME DEFALUT SETTINGS (terminal type, default prefix, mouse ...)
#
##############################################################################

#############################################################
# 1) change default prefix to Alt+1
# 2) set escape-time to 100 ms (default is 500)
#
#    (time which tmux waits after escape is pressed to deterimne
#     it it is part of function or meta key)
#
unbind C-b
set -g prefix M-1
set -sg escape-time 100


#############################################################
# disable some default tmux key bindings:
#
#   Alt + 1 + num 
#   Alt + 1 + Alt + num
#
unbind M-0
unbind M-1
unbind M-2
unbind M-3
unbind M-4
unbind M-5
unbind M-6
unbind M-7
unbind M-8
unbind M-9

unbind 0
unbind 1
unbind 2
unbind 3
unbind 4
unbind 5
unbind 6
unbind 7
unbind 8
unbind 9


#############################################################
# - start counting windows/tabs from 1
# - activate mouse
# - use vi style key bindings
#
set -g base-index 1
set -g mouse on
set -g mode-keys vi
set -g renumber-windows off


#############################################################
# ALT+1 r  ->  reload configuration
#
bind-key r source-file ~/.tmux.conf \; \
    display-message "Configuration reloaded!"


#############################################################
# ALT+1 ?  -> show help
# ALT+1 H  -> list key bindings
#
bind-key ? run-shell 'ltmux config keys'
bind-key H list-keys


##############################################################################
#
#  SET COLORS AND STATUS LINE
#
##############################################################################

#############################################################
# set default terminal 
#
# set -s default-terminal screen-256color
set -s default-terminal tmux-256color
set -ga terminal-overrides ",xterm-256color*:Tc"



#############################################################
# colors used for status line
#
status_bg_color=black              # status bg color
status_fg_color=green              # status fg color

window_status_bg_color=black       # window-status fg color
window_status_fg_color=green       # window-status fg color

window_status_curr_fg_color=black  # window-status-current fg color
window_status_curr_bg_color=green  # window-status-current bg color

status_left_fg_color=white         # status-left fg color
status_left_bg_color=colour53      # status-left bg color


#############################################################
# Default status line colors.
#
set -g status-style "fg=${status_fg_color}"


#############################################################
# Content and style of left and right
# status line sides.
#
status_left="#[bg=${status_left_bg_color},fg=${status_left_fg_color}]"
status_left="${status_left} o- #h -o"
status_left="${status_left} #[bg=default]   "

status_right="Show HELP with ALT+1 and then ?  "

set -g status-left-length 40
set -g status-left  "${status_left}"
set -g status-right "${status_right}"


#############################################################
# Window/tab status, style & content.
#
# We can set different style for current window/tab (the one
# with focus) and all other windows/tabs. Default is that
# tab will hold its name (which by default is the name of 
# running program).
#
# Exception to that is tab with zoomed pane (when we stretch
# pane over entire screen). In that case name will be followed
# by "[x]" indicating that we are on zoomed pane, and that some
# other panes (currently not visible) exist(s).
#
window_text=" #W#{?window_zoomed_flag, [x], }"
window_status=""
wst_col=""
cwst_col="#[fg=${window_status_curr_fg_color},bg=${window_status_curr_bg_color}]"
cwst_end_col="#[fg=${window_status_curr_bg_color},bg=default]"
current_window_status="#[fg=${window_status_curr_fg_color},bg=${window_status_curr_bg_color}]"

set -g window-status-format         "${window_status}${window_text}"
set -g window-status-current-format "${cwst_end_col}${cwst_col}${window_text}${cwst_end_col}"



##############################################################################
#
#  TAB/WINDOW related key bindings
#
##############################################################################


#############################################################
# Create new window/tab (add it to the end of window list)
#
bind-key . new-window -a
bind-key : if-shell \
    "if [ #{session_windows} -eq 1 ]; then return 0; else return 1; fi" \
    "new-window -a " \
    "new-window -a -t :'{end}'"


#############################################################
# Move windos/tab left or right
#
if-shell ' [ "$(echo #{version} | sed "s/\..*//")" -ge 3 ]' \
	" \
		bind-key > swap-window -d -t +1;\
		bind-key < swap-window -d -t -1 \
	" \
	" \
		bind-key > swap-window -t +1;\
		bind-key < swap-window -t -1 \
	"


#############################################################
# Select window/tab:
#
#  Go to right:  Alt + right arrow
#  Go to left:   Alt + left arrow
#
bind-key -n M-Right next-window          # focus on next window
bind-key -n M-Left  previous-window      # focus on previous window

#############################################################
# Rename windos/tab:
#
bind-key N command-prompt -I "#W" "rename-window -- '%%'"



##############################################################################
#
#  PANE related key bindings
#
##############################################################################


#############################################################
# Close current panel in a way that last panel
# can't be closed. Prefix + 0
#
bind-key 0  if-shell \
    "if [ #{session_windows} -eq 1 ] && [ #{window_panes} -eq 1 ]; then return 0; else return 1; fi" \
    "display-message \"This is last window!\"" \
    "kill-pane"


#############################################################
# Window/tab splitting shortcuts
#
#  Use numeric pad:
#    Prefix + -    # split horizontally
#    Prefix + /    # split vertically
#
#  If there is no numeric pad, and in case some app disables
#  access to numeric pad (for example when using vi editor)
#  use following shortcuts:
#
#    Prefix + h    # split horizontally
#    Prefix + v    # split vertically
#
#
bind-key - split-window       # split window horizontally
bind-key h split-window

bind-key / split-window -h    # split window vertically
bind-key v split-window -h


#############################################################
# Moving around panes
#                                                    +---+    
# Move to panel on the left:   prefix + Left         | U |     
# Move to panel on the right:  prefix + Right    +---+---+---+   
# Move to panel above:         prefix + Up       | L | D | R |
# Move to panel below:         prefix + Down     +---+---+---+
#
# Move to next pane:            Alt+2
#
bind-key Up        select-pane -U        # go to the upper pane
bind-key Down      select-pane -D        # go to the lower pane
bind-key Left      select-pane -L        # go to the left pane
bind-key Right     select-pane -R        # go to the right pane
bind-key -n M-2    select-pane -t :.+    # moving to next panel


#############################################################
# Panel manipulation:
#
#  Maximize panel:  Alt + Enter
#  Rotate panels:   Prefix + o
#                   Prefix + p
#
bind-key -n M-Enter   resize-pane -Z        # toggle full zoom of pane
bind-key o rotate-window -U                 # rotate panel layout in windows (up direction)
bind-key p rotate-window -D                 # rotate panel layout in windows (down direction)


#############################################################
# Move panels inside current window
#                                                    +---+    
# Move panel to the left:  Alt + 1 + Delete          | U |     
# Move panel to the right: Alt + 1 + PageDown    +---+---+---+   
# Move panel UP:           Alt + 1 + Home        | L | D | R |
# Move panel DOWN:         Alt + 1 + End         +---+---+---+
#
#
bind-key -n M-DC   swap-pane -dt '{left-of}'
bind-key -n M-PgDn swap-pane -dt '{right-of}'
bind-key -n M-End  swap-pane -dt '{down-of}'
bind-key -n M-Home swap-pane -dt '{up-of}'


#############################################################
# Select and swap panel with current one
#
#    Prefix + Insert
#
bind-key IC \
    run-shell '\
        tmux select-pane -m; \
        tmux choose-tree -Zw -F "#h" -f"##{==:##{session_name},#{session_name}}" \
        "swap-pane -dt %%"; \
        tmux select-pane -M'


#############################################################
# Resize panels:
#                                                   +---+    
# Expand panel to left:   Alt + 1 + Left            | U |     
# Expand panel to right:  Alt + 1 + Right       +---+---+---+   
# Expand panel UP:        Alt + 1 + Up          | L | D | R |
# Expand panel DOWN:      Alt + 1 + Down        +---+---+---+
#
#
bind-key -r M-Right    resize-pane -R 2    # resize pane to right
bind-key -r M-Left     resize-pane -L 2    # resize pane to left
bind-key -r M-Up       resize-pane -U 1    # resize pane up
bind-key -r M-Down     resize-pane -D 1    # resize pane down
